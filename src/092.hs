{-
Problem 92 「桁の2乗による連鎖」
=============================

各桁の2乗を足し合わせて新たな数を作ることを, 同じ数が現れるまで繰り返す.

例えば

　　44 → 32 → 13 → 10 → 1 → 1
　　85 → 89 → 145 → 42 → 20 → 4 → 16 → 37 → 58 → 89

のような列である. どちらも1か89で無限ループに陥っている.
驚くことに, どの数から始めても最終的に1か89に到達する.

では, 10,000,000より小さい数で89に到達する数はいくつあるか.

何回繰り返すと1か89に到達するかを調べてみる。
(maximum . map walk) [1..10000] ==> (11,89)

だいたい多くても10回くらいになりそう。10,000,000*10の計算なら愚直にやってみる。

--> 6秒で答えが出た。

それにしても1か89に到達するのは何故なんだろう。
-}

import           Data.Char (digitToInt)

main = print answer

answer = (length . filter ((==89) . snd . walk)) [1..10000000]

-- (1 or 89, 桁の2乗の和の繰り返し回数)
walk :: Int -> (Int,Int)
walk = walk' 0 where
  walk' n x | x==1 || x == 89 = (n, x)
            | otherwise = walk' (n+1) (next x)

-- 桁の2乗の和を返却
next :: Int -> Int
next = sum . map ((^2) . digitToInt) . show
